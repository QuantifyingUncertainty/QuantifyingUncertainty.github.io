{"name":"Quantifyinguncertainty.GitHub.io","tagline":"","body":"##<a name=\"intro\"/>1. Introduction\r\n\r\nThe \"Quantifying Uncertainty\" project develops code, examples and documentation for the Generalized Metropolis-Hastings (GMH) algorithm proposed in [(Calderhead, 2014)](#calder14). It implements a class of parallelized Monte-Carlo Markov Chains methods (MCMC) that can be used to estimate model parameters of complex physical and biological processes. Details of the GMH algorithm can be found in the scientific publications listed in the [References](#refs).\r\n\r\nThe GMH MCMC library is written in [Julia](http://julialang.org), a language designed for fast and flexible mathematical and technical computing. It combines aspects of R, MATLAB and Python and can be easily parallelized to take advantage of multi-processor machines and clusters. It has an active developer community making it available on Windows, Linux and Mac, and via cloud computing services such as [JuliaBox](http://juliabox.org/) or [Amazon Web Services](http://aws.amazon.com/) (AWS).\r\n\r\nThere are 2 different, potentially overlapping, situations in which to use the GMH library:\r\n\r\n1. To replicate MCMC experiments from [published scientific papers](#refs). In this case, we recommend to run the experiments from a pre-compiled machine image published on AWS. The machine images contain all the required code, libraries and data to run the MCMC experiments for a particular article, substantially reducing your set-up time. By following the AWS setup steps in Section 2 and 3 below, you will be able to run these experiments via a web browser such as Firefox or Chrome.\r\n2. To use the GMH library to design your own MCMC experiments. In addition to using GMH on AWS, alternative ways are to download the GMH repository from GitHub to your local machine or to work via [JuliaBox](http://juliabox.org). \r\n\r\nThe GMH code and documentation resides on GitHub in [GeneralizedMetropolisHastings.jl](https://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl). Examples to help users to develop their own MCMC simulations are included in another repository, [GMH-Examples.jl](https://github.com/QuantifyingUncertainty/GMH-Examples.jl). The remainder of this documentation outlines how to setup GMH on different platforms (AWS, JuliaBox, or your local machine). It explains in detail how to sign up for AWS (Section 2), how to use GMH on AWS (Section 3), on JuliaBox (Section 4) or on your local machine (Section 5) and how to publish your own AMIs to accompany the publication of scientific articles that use the GMH repository (Section 6).\r\n\r\n###<a name=\"acronyms\"/>Table 1. Acronyms\r\nAcronym | Full Name | Description\r\n:------:|:----------|:-----------\r\n**AMI** | Amazon Machine Image | A pre-configured software image of a virtual server\r\n**AWS** | Amazon Web Services  | Amazon's cloud computing services\r\n**EC2** | Elastic Cloud Computing | AWS service to run virtual servers\r\n**IAM** | Identity and Access Management | AWS service to create users\r\n**GMH** | Generalized Metropolis Hastings | Parallel Metropolis-Hastings from [(Calderhead, 2014)](#calder14)\r\n**MCMC** | [Monte-Carlo Markov Chain](https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo) | Class of algorithms to sample from unknown probability distributions\r\n\r\n##<a name=\"aws-setup\"/>2. AWS Setup\r\n\r\n###<a name=\"aws-signup\"/>Step 2.1: Sign up for an AWS account\r\n\r\nThis step requires a credit card to set up an account and a phone number to receive a security callback. By using Amazon's \"Free Tier\", it is possible to avoid being billed, but the credit card is still required. Follow the instructions in the AWS documentation:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html\r\n\r\nYou should complete the following steps: \r\n\r\n1. Create an AWS account\r\n2. Create an IAM user\r\n3. Create a Key Pair\r\n4. Create a Security Group\r\n\r\n###<a name=\"sg-rules\"/>Table 2. Required Security Group Settings\r\nWhen setting up the Security Group, specify the following inbound rules:\r\n\r\nService | Port | Source | Access\r\n:-------|:----:|:-----: | :-----\r\nSSH | 22 | 0.0.0.0/0 | SSH command-line access\r\nCustom TCP Rule | 8898 | 0.0.0.0/0 | Access to IJulia server\r\nCustom TCP Rule | 49152 - 65535 | 127.0.0.1/32 | Localhost ports for IJulia server\r\n\r\nThe “0.0.0.0/0” in the “Source” field means that incoming connections from any IP address are allowed. You can make the security group more secure by only allowing incoming connections from known IP addresses (e.g., \"My IP\" in the EC2 security group  control panel). This means, however, that every time you change your local IP address you will have to update the Security Group. As long as you are careful in implementing the security steps outlined in Section 3, the above settings should be fine.\r\n\r\nThe entire process of setting up an AWS account is likely to take between 1 and 2 hours, depending on your familiarity with AWS. These steps need to be completed only once.\r\n\r\n###<a name=\"aws-region\"/>Step 2.2: Check  the AWS region\r\n\r\nThis step typically needs to be performed only once - especially upon first signing up for AWS or if you cannot find the published AMIs listed in Section 3. Amazon regions (data centers) are independent of each other. In order to find the GMH AMIs, you need to be logged into the correct region. At this moment, the only region in which the GHM AMIs are published is **Ireland**. You can check and change the region in the top right corner of the AWS and EC2 dashboards, between your IAM username and “Support”.\r\n\r\n##<a name=\"gmh-on-aws\"/> 3. Using GMH on AWS\r\n\r\n###<a name=\"ami-pub\"/>Table 3: Published AMIs\r\n\r\nAMI Name | Description | Relevant Publication\r\n:--------------|:---------------|:--------------------------\r\n GMH-JULIA0.3-GENERIC | Julia v0.3.11 + GMH | [(Calderhead,2014)](#calder14)\r\n\r\n###<a name=\"launch-ami\"/>Step 3.1: Launch a published AMI\r\n\r\n####Step 3.1.1: Choose AMI\r\n\r\nOnce logged into the AWS dashboard, go to the EC2 console. Select **Instances** in the left-hand menu, and click the **Launch** button at the top of the panel. Select **Community AMIs** from the left-hand menu and in the search box that appears, copy-paste one of the published AMI names from Table 3. Click the **Select** button to launch the AMI.\r\n\r\n**Troubleshooting**: if no AMI appears in the list, then [check the AWS region](#aws-region).\r\n\r\n####Step 3.1.2: Choose an Instance Type\r\n\r\nHere you select the physical hardware on which to run. To avoid being billed, select an instance labelled with \"Free tier eligible\" (currently the t2.micro). Click **Next: Configure Instance Details.**\r\n\r\n####Step 3.1.3: Configure Instance Details\r\n\r\nFrom the \"Subnet\" drop-down list, select a subnet that corresponds to a particular availability zone, which is important if you will also attach an existing EBS-backed volume to contain your data (this is optional - see Step 3.3 below). Make a note of which availability zone you select (currently **eu-west-1a**, **1b** or **1c**). Choose **Next: Add Storage** at the bottom of the page.\r\n\r\n####Step 3.1.4: Add Storage\r\n\r\n**Optional**: you can add an additional drive to contain your private data and code. Rather than doing it here, see [Add an EBS volume](#add-ebs). Click **Next: Tag Instance**.\r\n\r\n####Step 3.1.5: Tag Instance\r\n\r\n**Optional**: add descriptive tags for your instance. Then click **Next: Configure Security Group**.\r\n\r\n####Step 3.1.6: Configure Security Group\r\n\r\nSelect the radio button **Select an existing security group** and select the Security Group for IJulia access that you made in [Step 2.1](#sg-rules). Click **Next: Review and Launch**.\r\n\r\n####Step 3.1.7: Review and Launch\r\n\r\nIt is safe to ignore the warning that the Security Group is open to the world (if the security steps outlined in Step 3.4 are adhered to). Click **Launch** at the bottom of the page. A pop-up window comes up. If you previously made a Key Pair, select **Choose an existing key pair**. Otherwise select **Create a new key pair** and make sure to download the private key to a safe location on your local machine.\r\n\r\nClick **Launch Instances**. On the next window, **Launch Status**, click **View Instances**, which takes you to the Instances page. Once the **Instance State** becomes green and says **running**, you can connect via SSH. \r\n\r\n###<a name=\"ami-connect\"/>Step 3.2: Connect to a running instance\r\n\r\nInstructions on how to connect to the instance via SSH can be found here:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-connect-to-instance-linux.html\r\n\r\nIf you are using Windows and PuTTy, follow these instructions to transform your local key:\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#create-a-key-pair\r\n\r\nThe default username for this machine is **ubuntu**. There is no password, but verification occurs with the Key Pair you created previously.\r\n\r\n**Troubleshooting**: if you cannot connect, then it may be because of the Security Group settings you launched the machine with. Check that they correspond to the ones in [Table 2](#sg-rules). If you opted to not allow access from all IP addresses (i.e., did not select 0.0.0.0/0 in [Table 2](sg-rules)), then make sure that the IP address in the Security Group is the same as the IP address of your local machine (visit http://myipaddress.com to find out).\r\n\r\n###<a name=\"add-ebs\"/>Step 3.3: Add an EBS Volume\r\n\r\n**Optional**: you can add additional storage to hold your data and experiments by following these instructions: \r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-add-volume-to-instance.html \r\n\r\nWhen connected to the instance via SSH, mount the new volume in the home folder rather than in the location suggested in the AWS user guide, for example:\r\n\r\n```\r\nsudo mount /dev/xvdf ~/data\r\n```\r\n\r\nIf you create an EBS volume, limit the size to a few GB as the Free Tier only comes with 30GB of free storage for all volumes combined.\r\n\r\n###<a name=\"secure-jupyter\"/>Step 3.4: Secure the Notebook server\r\n\r\n####<a name=\"password-jupyter\"/>Step 3.4.1: Prepare a Hashed Password\r\n\r\nAt the SSH command prompt, type:\r\n\r\n```\r\nipython\r\n```\r\n\r\nIn the IPython environment, execute:\r\n\r\n```\r\nfrom notebook.auth import passwd\r\npasswd()\r\n```\r\n\r\nType your preferred password twice. You will then see an SHA hash of the chosen password such as:\r\n\r\n```\r\n'sha1:328ae2b31aaa:82ecb6479a0d5c9d999c36f7949b26e78c69133e'\r\n```\r\n\r\nCopy-and-paste this to a secure location as we will need it in the following step. Exit the ipython environment by typing **exit()**\r\n\r\n**Important**: select a secure password, consisting preferably of 3 unconnected words, e.g., \"apple-spring-saxophone\". If the password you select here is not secure, then your AWS server is vulnerable to attack as the Notebook server allows any system command to be executed via a web browser.\r\n\r\n####<a name=\"password-file\"/>Step 3.4.2: Add the hashed password to your Notebook configuration file\r\n\r\nAdd your own SHA password to the file **/home/ubuntu/.jupyter/jupyter_notebook_config.py**:\r\n\r\n```\r\nc.NotebookApp.password = u'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'\r\n```\r\n\r\n**Tip**: if you are unfamiliar with command-line Linux, the simplest text editor is **pico**.:\r\n\r\n```\r\npico ~/.jupyter/jupyter_notebook_config.py\r\n```\r\n\r\n####<a name=\"ssl-jupyter\"/>Step 3.4.3: Using SSL for encrypted communication\r\n\r\nYou must create a self-signed SSL certificate to encrypt the communication to the server:\r\n\r\n```\r\ncd ~/.certificates\r\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mykey.pem -out mycert.pem\r\nchmod 400 mykey.pem mycert.pem\r\n```\r\n\r\nPress enter to accept all the default values. Please keep the locations and names of the key file and certificate file as above because the **jupyter_notebook_config.py** file has been pre-configured to find the files in that location.\r\n\r\n###<a name=\"launch-jupyter\"/>Step 3.5: Launch a Notebook server\r\n\r\nOn the SSH command line, you can start the Notebook server:\r\n\r\n```\r\ncd ~\r\njupyter notebook &\r\n```\r\n\r\nThe ampersand means that the notebook server is placed in the background. Once you see that the server is running on Port 8998, you can log out of the SSH session, and the server will continue to run in the background until the instance is terminated.\r\n\r\n###<a name=”login-jupyter”/>Step 3.6 Login to the Notebook server\r\n\r\nTo connect to the Notebook server via your browser, get the public IP address of your running instance from the EC2 console (the “Instances” page) and type it in the address bar of your web browser. Make sure to use **https** to connect (rather than plain **http**).\r\n\r\n```\r\nhttps://xxx.xxx.xxx.xxx:8998\r\n```\r\n\r\nThe browser will complain that the connection is not private because the identity of the self-signed SSL certificate could not be checked. You can safely ignore these warnings. \r\n\r\nYou are now at the notebook server login page. Type the plain text password you [created above](#password-jupyter). \r\n\r\n###<a name=”use-jupyter”/>Step 3.7: Using the Notebook server\r\n\r\nIf you started one of the published AMIs which contain the MCMC experiments for specific papers, then under the “Files” tab in the notebook server, you will see the corresponding experiments. Notebook files contain both code and documentation, so please refer to these notebooks for further information.\r\n\r\nYou can start individual notebooks by navigating to one of the folders containing a notebook, and double-clicking it. You can also start a command-line terminal by selecting “New/Terminal” from the right-hand side of the screen. For further information on the notebook server interface, see the [Jupyter](http://jupyter.readthedocs.org/en/latest/) documentation. \r\n\r\nIf you started a “generic” GMH AMI, then you will not see any files listed, but you can install the GMH-Examples.jl package to explore example Julia notebooks and scripts that explain how to use the GMH library. Execute the following git command in a terminal (either via the SSH terminal or a Jupyter Terminal in the browser window):\r\n\r\n```\r\ngit clone https://github.com/QuantifyingUncertainty/GMH-Examples.jl.git\r\n```\r\nThe repository is now accessible under the “Files” tab of the notebook server. Please refer to the [GMH-Examples.jl](https://github.com/QuantifyingUncertainty/GMH-Examples.jl) documentation on how to use this package.\r\n\r\n###<a name=”stop-jupyter”/>Step 3.8: Stopping/Terminating the Notebook server and AWS machine\r\n\r\nWhen finished, there are multiple levels of halting/terminating the Notebook server and AWS machine:\r\n\r\n\r\n1. Logout of the notebook server by clicking the “Logout” button at the top right of the server screen. The server will continue to be accessible on Port 8998 for future login.\r\n2. The Notebook server can be halted via the SSH terminal (e.g., using the Unix **kill** command).\r\n3. In the AWS/EC2 dashboard, under the **Instances** tab, you can temporarily stop the running EC2 instance, by selecting the instance and clicking **Actions/Instance State/Stop** at the top of the screen. This will power down the computer, but it will remain available to restart later. Note that, unless you **Stop** an EC2 instance, the running time is chargeable, even if your computer is idle (unless you operate within Amazon’s “Free Tier”).\r\n4. You can also **Terminate** an instance. This means that the resources associated with the instance will be deleted. In other words, an instance that has been terminated cannot be restarted, and you would need to setup the machine anew.\r\n\r\n##<a name=\"gmh-on-box\"/> 4. Using GMH in JuliaBox\r\n\r\n###Step 4.1: Sign in to JuliaBox \r\n\r\nGo to https://juliabox.org and sign in with your Google credentials.\r\n\r\n###Step 4.2: Install the GeneralizedMetropolisHastings.jl package.\r\n\r\nAt the top of the JuliaBox window, select **Terminal**. Execute the following command to install GMH for the Julia v0.3.11 installation of JuliaBox (the currently preferred version for GMH). This will install GMH in the package folder **/home/juser/.julia/0.3**.\r\n\r\n```\r\n/opt/julia-0.3.11/bin/julia -e ‘Pkg.clone(\"git://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl\")’\r\n```\r\n\r\nYou can test if GMH installed correctly and is compatible with this particular JuliaBox installation by running the GMH tests:\r\n\r\n```\r\n/opt/julia-0.3.11/bin/julia -e ‘include(normpath(Pkg.dir(\"GeneralizedMetropolisHastings\"),\"test/runtests.jl\"))’\r\n```\r\n\r\n###Step 4.3 Sync the GMH-Examples repository\r\n\r\nSync the GMH-Examples.jl repository from GitHub to your JuliaBox home folder. At the top of the JuliaBox window, select **Sync**.  Add the following repository to the “Git Repositories”.\r\n\r\nhttps://github.com/QuantifyingUncertainty/GMH-Examples.jl.git\r\n\r\nPaste this into the “Git Clone URL”. Accept “master” as branch, “GMH-Examples.jl” as location, and press “+” to add the repository. This will now download the package to the specified location. \r\n\r\nPlease refer to the documentation of the [GMH-Examples-jl](https://github.com/QuantifyingUncertainty/GMH-Examples.jl) repository for details of how to use it.\r\n\r\n#<a name=\"gmh-on-local\"/>5. Using GMH locally\r\n\r\n###Step 5.1: Install Julia + IDE\r\n\r\nInstall Julia from http://julialang.org/downloads/. You can also install a development environment. On Windows, [Juno](http://junolab.org/) is recommended.\r\n\r\n###Step 5.2: Install the GMH package\r\n\r\nStart Julia and execute the following commands:\r\n\r\n```\r\nPkg.clone(\"git://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl\")\r\n```\r\n\r\nThis will install the GMH repository and the required packages.\r\n\r\nThe GMH repository has been tested with Julia v0.3.8-v0.3.11. Julia and its packages are in rapid development and you may wish to test your current Julia installation with GMH. You can do so by running the GMH tests:\r\n\r\n```\r\ninclude(normpath(Pkg.dir(\"GeneralizedMetropolisHastings\"),\"test/runtests.jl\"))\r\n```\r\n\r\n###Step 5.3 Install the GMH-Examples repository\r\n\r\nInstall the GMH-Examples.jl repository from GitHub in a local folder. Instructions on how to do this for your platform can be found on [GitHub](https://github.com/QuantifyingUncertainty/GMH-Examples.jl). \r\n\r\nPlease refer to the documentation of the [GMH-Examples-jl](https://github.com/QuantifyingUncertainty/GMH-Examples.jl) repository on how to use it.\r\n\r\n##<a name=\"gmh-ami-setup\"/>6. Configure AMIs with GMH\r\n\r\n###<a name=\"ami-julia0.3\"/>6.1 AMI with Julia v0.3.11\r\n\r\n####Step 6.1.1 Launch and connect to a fresh EC2 instance\r\n\r\nFollow the instructions of [Step 3.1](#launch-ami] and [Step 3.2](#ami-connect), but rather than selecting a published AMI via the Community AMIs start from a Ubuntu Server 14.04LTS.\r\n\r\n####Step 6.1.2 Install Julia 0.3 (currently 0.3.11)\r\n\r\n```\r\nsudo add-apt-repository ppa:staticfloat/julia-deps\r\nsudo add-apt-repository ppa:staticfloat/juliareleases\r\nsudo apt-get update\r\nsudo apt-get -y install build-essential\r\nsudo apt-get -y install julia0.3\r\n```\r\n\r\nThe **build-essential** package contains essential build tools that Julia needs to build some of its own packages. If the installation was successful, then it is now possible to run Julia at the command prompt. You can test this by typing **julia**. Exit from Julia by typing **exit()**.\r\n\r\n####Step 7.1.3 Install GMH, IJulia and additional Julia packages\r\n\r\n```\r\njulia -e 'Pkg.clone(\"git://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl\")'\r\n```\r\n\r\nThe above step will install all packages required for GMH. The IJulia package (which enables access to Julia via a web browser) installs its own [Jupyter](http://jupyter.org) server. To add this server to the path so it can be started from the command line, add this path to **/home/ubuntu/.profile**:\r\n\r\n```\r\necho 'PATH=\"$PATH:/home/ubuntu/.julia/v0.3/Conda/deps/usr/bin\"' >> /home/ubuntu/.profile\r\n```\r\n\r\n####Step 6.1.4 Prepare the IJulia Notebook server for remote access\r\n\r\nCreate a file **/home/ubuntu/.jupyter/jupyter_notebook_config.py** with the following lines:\r\n\r\n```\r\nc.NotebookApp.ip = '*'\r\nc.NotebookApp.port = 8998\r\nc.NotebookApp.open_browser = False\r\nc.NotebookApp.keyfile = u'/home/ubuntu/.certificates/mykey.pem'\r\nc.NotebookApp.certfile = u'/home/ubuntu/.certificates/mycert.pem'\r\nc.NotebookApp.password = u''\r\n```\r\n\r\nThe keyfile, certfile and password will need to be added by the user when customizing this AMI. \r\n\r\nMake the **jupyter_notebook_config.py** file readable and writable only to the local user:\r\n\r\n```\r\nchmod 600 ~/.jupyter/jupyter_notebook_config.py\r\n```\r\n\r\nPrepare a directory for the SSL certificates:\r\n\r\n```\r\nmkdir ~/.certificates\r\n```\r\n\r\n####Step 6.1.5 Create the AMI\r\n\r\nBefore creating the AMI, you must remove the SSH key with which the instance was started, as well as any command line histories:\r\n```\r\nsudo find /home/ubuntu/.*history -exec rm -f {} \\;\r\nsudo find /root/.ssh/authorized_keys -exec rm -f {} \\;\r\nsudo find /home/ubuntu/.ssh/authorized_keys -exec rm -f {} \\;\r\n```\r\nFurther security guidelines can be found in: https://aws.amazon.com/articles/0155828273219400\r\n\r\nStop the instance customised above from the EC2 console, and follow these steps to create the AMI:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#how-to-create-ebs-ami\r\n\r\nHere are general guidelines to share a public AMI:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharing-amis.html\r\n\r\n## 7. References <a name=\"refs\"/>\r\n\r\n<a name=\"calder14\"/>Calderhead B. (2014), [A general construction for parallelizing Metropolis-Hastings algorithms](http://www.pnas.org/content/111/49/17408.abstract), PNAS, Vol: 111, Pages: 17408-17413\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}