{"name":"Quantifyinguncertainty.GitHub.io","tagline":"","body":"## 1. Introduction\r\n\r\nThe \"Quantifying Uncertainty\" project develops a code library, examples and documentation for the Generalized Metropolis-Hastings (GMH) algorithm detailed in [(Calderhead, 2014)](http://www.pnas.org/content/111/49/17408.abstract). It can be used to run Monte-Carlo Markov Chain methods (MCMC) to estimate model parameters of complex physical and biological processes. The GMH algorithm has been used in the scientific publications detailed [References](#refs).\r\n\r\nThe GMH MCMC code is written in [Julia](http://julialang.org), a relatively new language designed for fast and flexible technical computing. It combines aspects of R, MATLAB and Python and can be easily parallelized to run on clusters and cloud computers. It has an active developer community making the language accessible on multiple platforms: Windows, Linux and Mac, and via cloud computing such as [Amazon Web Services](http://aws.amazon.com/) (AWS) or [JuliaBox](http://juliabox.org/).\r\n\r\nTypical use cases of the code and documentation are:\r\n\r\n1. To reproduce the MCMC experiments from [these published papers](#refs). We recommend to run experiments from a pre-compiled machine image published on AWS. The machine images contain all the required code, libraries and data to run the MCMC experiments for a particular scientific publication, substantially reducing your set-up time. By following the setup steps below, you will be able to run these experiments via a [Jupyter/IJulia](http://jupyter.org/) Notebook server, making them accessible via a browser like Firefox or Chrome.\r\n2. Use the GMH code library to design your own MCMC experiments. The preferred way is to download the GMH repository from GitHub to your local machine or to work in the cloud via [JuliaBox](http://juliabox.org). \r\n\r\nThe GMH repository can be downloaded from its repository on [GitHub](https://github.com/QuantifyingUncertainty/GeneralizedMetropolisHastings.jl). It contains code to develop your own MCMC models. Documentation and examples included in the repository explain how. The rest of the documentation below outlines how to set up on different platforms (AWS, JuliaBox, or your local machine). Steps explained below include how to sign up for AWS, how to run a published AMI, how to set up the GMH repository on [Juliabox](http://juliabox.org) or on your local machine, and how to set up and publish your own AMI to accompany the publication of scientific articles that use the GMH repository.\r\n\r\n## 2. Acronyms\r\nAcronym | Full Name | Description\r\n:------:|:----------|:-----------\r\n**AMI** | Amazon Machine Image | An pre-compiled software image for a virtual server\r\n**AWS** | Amazon Web Services  | Umbrella name for Amazon's cloud computing services\r\n**EC2** | Elastic Cloud Computing | AWS service to run virtual servers\r\n**IAM** | Identity and Access Management | AWS service to create users and manage access to other services\r\n**GMH** | Generalized Metropolis Hastings | Parallel Metropolis Hastings algorithm outlined in [(Calderhead, 2014)](http://www.pnas.org/content/111/49/17408.abstract)\r\n**MCMC** | [Monte-Carlo Markov Chain](https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo) | Algorithms to sample from unknown probability distributions\r\n\r\n## 3. AWS Setup\r\n\r\n### Step 3.1: Sign up for an AWS account <a name=\"step3-1\"/>\r\n\r\nThis step requires a credit card to set up an account and a phone number to receive a security callback. By using Amazon's \"Free Tier\", it is possible to avoid being billed, but the credit card is still required.\r\n\r\nPlease follow the instructions in the following AWS documentation:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html\r\n\r\nYou should complete the following steps outlined in the AWS documentation: \r\n\r\n1. Create an AWS account\r\n2. Create one or more IAM users\r\n3. Create a Key Pair\r\n4. Create a Security Group. \r\n\r\n### Required Security Group Settings\r\nWhen setting up the Security Group, specify the following inbound ports:\r\n\r\nService | Port | Source | Access\r\n:-------|:----:|:-----: | :-----\r\nSSH | 22 | 0.0.0.0/0 | SSH command-line access\r\nCustom TCP Rule | 8898 | 0.0.0.0/0 | Web browser access to Julia server\r\nCustom TCP Rule | 49152 - 65535 | 127.0.0.1/32 | Localhost ports for Julia server\r\n\r\nThe “0.0.0.0/0” in the “Source” field means that incoming connections from any IP address are allowed. You can make the security group more secure by only allowing incoming connections from known IP addresses (e.g., \"My IP\" in the EC2 control panel). This means that every time you change your local IP address you will have to update the Security Group. As long as you are careful with the security steps outlined in Steps X and X below, the above settings should be fine.\r\n\r\nThe entire process of setting up an account, creating IAM users and setting up a security group is likely to take between 1 and 2 hours, depending on your familiarity with AWS. These steps need to be completed only once.\r\n\r\n### Step 3.2: Open the EC2 dashboard and check the region\r\n\r\nFrom the AWS console, select “EC2”. The EC2 dashboard will open.\r\n\r\nAmazon regions (data centers) are independent. In order to find the AMIs described below, you need to make sure that you are logged into the correct region. At this moment, the only region in which the pre-compiled AMIs are published is “Ireland”. Check this in the top right corner of the EC2 dashboard, between your IAM username and “Support”.\r\n\r\n## 4. Run GMH in an AMI on AWS <a name=\"section4\"/>\r\n\r\n## 5. Using GMH on JuliaBox\r\n\r\n## 6. Using GMH locally\r\n\r\n## 7. Set up an AMI with the GMH repository\r\n\r\nThese notes contain the different steps required to set up an Jupyter/IJulia server on AWS. For up to date information see the documentation from the [IJulia](https://github.com/JuliaLang/IJulia.jl) and [Jupyter](http://jupyter-notebook.readthedocs.org/en/latest/public_server.html) GitHub repositories.\r\n\r\n### Step 7.1 Launch an EC2 instance\r\n\r\nFollow these instructions to launch a new machine instance:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance_linux.html\r\n\r\nChoose the Ubuntu Server 14.04 LTS (or a later version of Ubuntu). Different instance types have different costs associated. The one that currently falls within AWS's Free Tier is t2.micro.\r\n\r\n### Step 7.2: Connect to the EC2 instance\r\n\r\nFollow these instructions to connect to the instance:\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-connect-to-instance-linux.html\r\n\r\nGenerate a new key pair when connecting to this machine for the first time, or use a previously generated key pair (see [Step 3.1](#step3-1). The username for the Ubuntu Server 14.04LTS defaults to \"ubuntu\".\r\n\r\n### Step 7.3 Install Julia on the machine\r\n\r\nIn order to install the latest stable release of Julia, at the SSH command prompt, perform the following steps:\r\n\r\n```\r\nsudo add-apt-repository ppa:staticfloat/julia-deps\r\nsudo add-apt-repository ppa:staticfloat/juliareleases\r\nsudo apt-get update\r\nsudo apt-get -y install build-essential\r\nsudo apt-get -y install julia\r\n```\r\n\r\nThe `build-essential` package contains essential build tools that Julia needs to build some of its own packages. \r\n\r\nIf the installation was successful, then it is now possible to run Julia at the command prompt. You can test this by typing `julia`. Exit via typing `exit()`.\r\n\r\n### Step 7.4 Install IJulia/Jupyter and additional Julia packages\r\n\r\nAt the SSH command line, execute:\r\n\r\n```\r\njulia -e 'Pkg.add(\"IJulia\")'\r\njulia -e 'Pkg.add(\"PyPlot\")'\r\njulia -e 'Pkg.add(\"Gadfly\")'\r\njulia -e 'Pkg.add(\"Distributions\")'\r\njulia -e 'Pkg.add(\"Sundials\")'\r\n```\r\n\r\nThe IJulia package installs its own Jupyter server. To add this server to your path so it can be started from the command line, add the following line to the `/home/ubuntu/.profile` file:\r\n\r\n`PATH=\"$PATH:/home/ubuntu/.julia/v0.4/Conda/deps/usr/bin\"`\r\n \r\n### Step 7.5 Prepare a Jupyter Notebook server for remote access\r\n\r\nFor the most up-to-date information, check the [Jupyter](http://jupyter-notebook.readthedocs.org/en/latest/public_server.html) documentation. Some of these steps (securing the notebook server) should be performed later (see [Step 4.4](#section4)). Start by generating a `jupyter_notebook_config.py` file:\r\n\r\n```\r\njupyter notebook --generate-config\r\n\r\n```\r\n\r\nIn the resulting `/home/ubuntu/.jupyter/jupyter_notebook_config.py` file, uncomment and edit the following lines:\r\n\r\n```\r\nc.NotebookApp.ip = '*'\r\nc.NotebookApp.open_browser = False\r\nc.NotebookApp.port = 8998\r\n```\r\n\r\nThose are the steps that can be completed for Step 7.5. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## 8. References <a name=\"refs\"/>\r\n\r\nCalderhead B, 2014, [A general construction for parallelizing Metropolis-Hastings algorithms](http://www.pnas.org/content/111/49/17408.abstract), PNAS, Vol: 111, Pages: 17408-17413\r\n\r\n ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}